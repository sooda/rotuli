Rotuli static site compiler
===========================

A work in progress to become the most universal content processor.

.. image:: rotuli_in_use.jpg
   :alt: people using rotuli
   :width: 99%

*Figure 1: numerous rotuli have been used since the Roman Empire.*

(Some lunatics claim that the term is "`generator`_" instead of compiler, but original content is generated by people, not software.)

.. _generator: https://www.staticgen.com/

Philosophy
----------

* Rotuli goal number one is to stay dumb and format-agnostic; it just is a support structure for your data, making it slightly easier to present what you have.
* Rotuli is also the plural form of `rotulus`_, an ancient roll that holds written information.
* Text content in, goes through one template, rendered stuff is squeezed out. Repeat for each special content file. Non-special stuff is just copied.
* Identical directory listings for input and output. No "posts" directories, i.e., "routing" is trivial.
* Markup language, metadata language and template language shall be anything you want (rst, yaml and jinja for now).
* Additional features are built on metadata and template structure.

.. _rotulus: https://en.wikipedia.org/wiki/Rotulus

Rotuli is generic; it assumes nothing about your site.
The content does not even need to be a website.
Use it for a book if you like.
Render PDFs if you prefer that format (when the template system supports that).
Rotuli only provides rendering logic, metadata handling and some template filters.
The content does not know that it's being massaged.

Rotuli does not even have config files.
Config files are evil because global variables are evil.
Treat your pieces of data as individuals.

No template code is allowed in the source data, because data should be tool-agnostic.
Handy shortcuts for images or code listings or something? Sorry, no.

Core features
-------------

* Consistent input and output file hierarchy
* Fast incremental builds for iterative work and minimized waste
* Rendering some of the input files through templates
* Arbitrary metadata embedded in the source files, passed to the templates with minimal magic
* Content groups (crossreferences in the metadata)
* Draft metadata key for excluding content unless specified

Implicit features
-----------------

For example:

* Trivial links to source repository for each rendered page
* Multilingual content: use the metadata and groups to link originals and translations together
* Categories aka tags aka keywords: again, group content together in the metadata and use templates to list them
* Automatic by-date groups to list content (e.g., blog posts) based on year, month or day

Why
---

* Something simple, something generic, yet something very specific
* Someone wanted to have a hobby project for learning the Rust_ programming language
* The name is quite fun if you think about it (and apparently `more unique than Rotulus`_ these days unlike in 2016 when this project was started and abandoned for four years)
* The name starts with the same letter as the language

.. _Rust: https://www.rust-lang.org/
.. _more unique than Rotulus: https://github.com/search?q=rotulus
